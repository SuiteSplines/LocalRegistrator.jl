var documenterSearchIndex = {"docs":
[{"location":"#LocalRegistrator","page":"Home","title":"LocalRegistrator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LocalRegistrator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#LocalRegistrator.head_commit_hash-Tuple{String}","page":"Home","title":"LocalRegistrator.head_commit_hash","text":"head_commit_hash(path::String)\n\nReturns commit hash of HEAD in repository located at path. The repository must exist and be a top-level repository, see istoplevel\n\n\n\n\n\n","category":"method"},{"location":"#LocalRegistrator.isdirty-Tuple{String}","page":"Home","title":"LocalRegistrator.isdirty","text":"isdirty(path::String)\n\nReturns true if the repository located at path is dirty and false otherwise. It does not throw an exception if the git process fails.\n\n\n\n\n\n","category":"method"},{"location":"#LocalRegistrator.istoplevel-Tuple{String}","page":"Home","title":"LocalRegistrator.istoplevel","text":"istoplevel(path::String)\n\nReturns true if a top-level repository is located at path and false otherwise. It does not throw an exception if the git process fails.\n\n\n\n\n\n","category":"method"},{"location":"#LocalRegistrator.register-Union{Tuple{}, Tuple{S}} where S<:AbstractString","page":"Home","title":"LocalRegistrator.register","text":"register(; project_url::S, registry_url::S, registry_deps::Vector{S}=[\"https://github.com/JuliaRegistries/General.git\"], dry_run::Bool=false) where {S<:AbstractString}\n\nRegister lastest version of a package located at project_url (in best case a remote repository) in a local registry located at registry_url, e.g.\n\nregister(; project_url=\"https://github.com/SuiteSplines/SuiteSplinesExamplePkg.jl.git\", registry_url=\"https://github.com/SuiteSplines/SuiteSplinesRegistry.git\")\n\nIf your package depends on some other local repositories, include these in registry_deps. The General repository is included by default.\n\n\n\n\n\n","category":"method"},{"location":"#LocalRegistrator.tree_hash-Union{Tuple{String}, Tuple{S}} where S<:AbstractString","page":"Home","title":"LocalRegistrator.tree_hash","text":"tree_hash(path::String; commit::String = \"HEAD\")\n\nReturns tree hash of commit in repository located at path. The repository must exist and be a top-level repository, see istoplevel\n\n\n\n\n\n","category":"method"}]
}
