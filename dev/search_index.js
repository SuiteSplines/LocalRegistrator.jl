var documenterSearchIndex = {"docs":
[{"location":"#LocalRegistrator","page":"Home","title":"LocalRegistrator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The LocalRegistrator package can be used to register packages in local registries like SuiteSplinesRegistry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"LocalRegistrator not only adds an entry to the local registry but does so in such a way that the RegistryCI.jl workflows can be triggered. In particular, it pushes new branches with specific commits including the required metadata.","category":"page"},{"location":"","page":"Home","title":"Home","text":"commit 63f80182919aee9c11bfbee921cf82cfb3e1f7c3 (HEAD -> registrator-pkgrjafoyj-0b413700-v0.1.0-201387a467)\nAuthor: John Smith <john@smith.com>\nDate:   Sat Jun 14 18:10:40 2025 +0200\n\n    #New package: PkgRjAfOyj v0.1.0\n    \n    - UUID: 0b413700-5fdb-4858-b8d2-f50f66534dc9\n    - Repository: /tmp/jl_kCBk2I/PkgRjAfOyj\n    - Tree: be22417d679128c823d779bdf18ce9ab2da3ca6f\n    - Commit: b03f9009f34745b657652b7e475ec23ece457fb2\n    - Version: v0.1.0\n    - Labels: new package","category":"page"},{"location":"#Workflow","page":"Home","title":"Workflow","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Make sure your remote repository and the default branch are up to date. This includes merging any local changes and bumping the version in Project.toml. Use semantic versioning.\nUse LocalRegistrator to register the package. You will need the remote URL of the package in question as well as the remote URL of the target registry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"register(; project_url=\"https://github.com/SuiteSplines/SuiteSplinesExamplePkg.jl.git\", registry_url=\"https://github.com/SuiteSplines/SuiteSplinesRegistry.git\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"At the end, you will see the included commit message and be prompted to confirm pushing the new branch to the remote registry.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#LocalRegistrator.head_commit_hash-Tuple{String}","page":"Home","title":"LocalRegistrator.head_commit_hash","text":"head_commit_hash(path::String)\n\nReturns commit hash of HEAD in repository located at path. The repository must exist and be a top-level repository, see istoplevel.\n\n\n\n\n\n","category":"method"},{"location":"#LocalRegistrator.isdirty-Tuple{String}","page":"Home","title":"LocalRegistrator.isdirty","text":"isdirty(path::String)\n\nReturns true if the repository located at path is dirty and false otherwise. It does not throw an exception if the git process fails.\n\n\n\n\n\n","category":"method"},{"location":"#LocalRegistrator.istoplevel-Tuple{String}","page":"Home","title":"LocalRegistrator.istoplevel","text":"istoplevel(path::String)\n\nReturns true if a top-level repository is located at path and false otherwise. It does not throw an exception if the git process fails.\n\n\n\n\n\n","category":"method"},{"location":"#LocalRegistrator.register-Union{Tuple{}, Tuple{S}} where S<:AbstractString","page":"Home","title":"LocalRegistrator.register","text":"register(; project_url::S, registry_url::S, registry_deps::Vector{S}=[\"https://github.com/JuliaRegistries/General.git\"], dry_run::Bool=false) where {S<:AbstractString}\n\nRegister lastest version of a package located at project_url (in best case a remote repository) in a local registry located at registry_url, e.g.\n\nregister(; project_url=\"https://github.com/SuiteSplines/SuiteSplinesExamplePkg.jl.git\", registry_url=\"https://github.com/SuiteSplines/SuiteSplinesRegistry.git\")\n\nIf your package depends on some other local repositories include these in registry_deps. The General repository is included by default.\n\n\n\n\n\n","category":"method"},{"location":"#LocalRegistrator.tree_hash-Union{Tuple{String}, Tuple{S}} where S<:AbstractString","page":"Home","title":"LocalRegistrator.tree_hash","text":"tree_hash(path::String; commit::String = \"HEAD\")\n\nReturns tree hash of commit in repository located at path. The repository must exist and be a top-level repository, see istoplevel.\n\n\n\n\n\n","category":"method"}]
}
